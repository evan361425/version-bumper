{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$ref": "#/definitions/IConfig",
  "definitions": {
    "IConfig": {
      "type": "object",
      "properties": {
        "repo": {
          "$ref": "#/definitions/IRepo"
        },
        "process": {
          "$ref": "#/definitions/IProcess"
        },
        "hook": {
          "$ref": "#/definitions/IHook"
        },
        "changelog": {
          "$ref": "#/definitions/IChangelog"
        },
        "autoLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IAutoLink"
          }
        },
        "pr": {
          "$ref": "#/definitions/IPR"
        },
        "diff": {
          "$ref": "#/definitions/IDiff"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ITag"
          }
        },
        "$schema": {
          "type": "string",
          "default": "node_modules/@evan361425/version-bumper/schema.json"
        }
      },
      "additionalProperties": false,
      "title": "Configuration of the bumper.",
      "default": {
        "$schema": "node_modules/@evan361425/version-bumper/schema.json"
      }
    },
    "IRepo": {
      "type": "object",
      "properties": {
        "link": {
          "type": "string",
          "default": "using `git remote get-url origin`, if not found throw exception",
          "title": "Link to the repository, it will use for tags in Changelog."
        }
      },
      "required": [
        "link"
      ],
      "additionalProperties": false,
      "title": "Repository settings."
    },
    "IProcess": {
      "type": "object",
      "properties": {
        "bump": {
          "type": "boolean",
          "title": "Whether to bump the version.\n\nIt will then try to tag the new version.",
          "default": true
        },
        "push": {
          "type": "boolean",
          "title": "Push all commits and tags.",
          "default": true
        },
        "pr": {
          "type": "boolean",
          "title": "Create PR in tags, and `tags[].prBranches` must be set",
          "default": true
        },
        "release": {
          "type": "boolean",
          "title": "Create release in tags, and `tags[].release` must be set",
          "default": true
        },
        "checkTag": {
          "type": "boolean",
          "title": "Throw error if tag already exists in local.",
          "default": true
        },
        "checkRemoteTag": {
          "type": "boolean",
          "title": "Throw error if tag already exists in remote.",
          "default": false
        },
        "wantedTicket": {
          "type": "boolean",
          "title": "Ask for the ticket number if not found.",
          "default": false
        },
        "askToVerifyContent": {
          "type": "boolean",
          "title": "Ask for verification of the changelog content.",
          "default": true
        },
        "askToChooseTag": {
          "type": "boolean",
          "title": "Ask to choose which tag pattern to bump if multiple tags found.",
          "default": false
        },
        "useSemanticGroups": {
          "type": "boolean",
          "title": "Use semantic commit message to map the `diff.groups`.\n\n- `^fix` as `Fixed`\n- `^feat`, `^add` as `Added`\n- `^[\\w\\(\\)]+!`, `BREAKING CHANGE` as `Changed`, with priority 1",
          "default": true
        },
        "useSemanticTag": {
          "type": "boolean",
          "title": "Add semantic tag naming to `tags`.\n\n- Use pattern `v[0-9]+.[0-9]+.[0-9]+` and name `semantic`.\n- Enable release with default title and body, see default from `tags[].release`.\n- Enable changelog.",
          "default": true
        },
        "useReleaseCandidateTag": {
          "type": "boolean",
          "title": "Add release candidate (rc) tag naming to `tags`.\n\n- Use pattern `v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+` and name `release-candidate`.\n- Disable release.\n- Disable changelog.\n\nIf `useSemanticTag` is enabled, it will pushed after the semantic tag.",
          "default": false
        }
      },
      "additionalProperties": false,
      "title": "How to process the version bumping."
    },
    "IHook": {
      "type": "object",
      "properties": {
        "afterVerified": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "examples": [
            [
              "echo \"version: {version}\""
            ]
          ],
          "title": "Commands to run after version is verified.\n\nEach string will be separated by space except the string inside the quotes. This will be run even in debug mode and not support templating as `Template`.\n\nCommand exit code must be 0 to continue the process.\n\nAllowed variables:\n- `{repo}`: repository link, see `repo.link`\n- `{version}`: version number\n- `{versionName}`: version name set in tag config\n- `{versionLast}`: last version number\n- `{ticket}`: ticket number"
        },
        "afterAll": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "examples": [
            [
              "echo \"version: {version}\""
            ]
          ],
          "title": "Commands to run after all the process is done.\n\nEach string will be separated by space except the string inside the quotes. This will be run even in debug mode and not support templating as `Template`.\n\nAllowed variables:\n- `{repo}`: repository link, see `repo.link`\n- `{version}`: version number\n- `{versionName}`: version name set in tag config\n- `{versionLast}`: last version number\n- `{ticket}`: ticket number"
        }
      },
      "additionalProperties": false,
      "title": "Commands to run before and after the process."
    },
    "IChangelog": {
      "type": "object",
      "properties": {
        "enable": {
          "type": "boolean",
          "title": "Enable changelog generation.",
          "default": true
        },
        "destination": {
          "type": "string",
          "title": "File path to the changelog file.",
          "default": "CHANGELOG.md"
        },
        "destinationDebug": {
          "type": "string",
          "examples": [
            "CHANGELOG.debug.md"
          ],
          "default": "`destination` with `.debug` suffix before the extension",
          "title": "Destination of changelog when in debug mode."
        },
        "section": {
          "$ref": "#/definitions/ITemplate",
          "title": "The changelog of specific version.\n\nDefault will prepend `## ` before the first line.\n\nAllowed variables:\n- `{repo}`: repository link, see `repo.link`\n- `{content}`: new version changelog body from `diff`.\n- `{version}`: current version number\n- `{versionName}`: version name set in tag config\n- `{versionLast}`: last version number\n- `{diffLink}`: link to the diff of this version\n- `{ticket}`: ticket number\n- `{date}`: current date, format is `YYYY-MM-DD`\n- `{time}`: current time, format is `HH:mm:ss`",
          "default": {
            "value": "[{version}] - {date}\n\n{Ticket: \"ticket\"<NL><NL>}{content}"
          }
        },
        "commit": {
          "$ref": "#/definitions/IChangelogCommit",
          "title": "After update the changelog, commit the changes.",
          "default": {
            "message": {
              "value": "chore: bump to {version}"
            },
            "addAll": true
          }
        }
      },
      "additionalProperties": false,
      "title": "Changelog settings."
    },
    "ITemplate": {
      "type": "object",
      "properties": {
        "file": {
          "type": "string",
          "description": "File path to the template file.\n\nPriority: 2"
        },
        "value": {
          "type": "string",
          "description": "Plain text template.\n\nPriority: 1, last to be used."
        },
        "github": {
          "$ref": "#/definitions/ITemplateGitHub",
          "description": "Query to get the template.\n\nPriority: 3, first to be used."
        }
      },
      "additionalProperties": false,
      "title": "Template settings."
    },
    "ITemplateGitHub": {
      "type": "object",
      "properties": {
        "repo": {
          "type": "string",
          "description": "Repository name."
        },
        "branch": {
          "type": "string",
          "description": "The branch to get the template.",
          "examples": [
            "master"
          ],
          "default": "main"
        },
        "path": {
          "type": "string",
          "description": "File path to the template file."
        }
      },
      "required": [
        "repo",
        "path"
      ],
      "additionalProperties": false
    },
    "IChangelogCommit": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/ITemplate",
          "title": "Commit message template.\n\nAllowed variables:\n- `{repo}`: repository link, see `repo.link`\n- `{version}`: current version number\n- `{versionName}`: version name set in tag config\n- `{versionLast}`: last version number\n- `{ticket}`: ticket number",
          "default": {
            "value": "chore: bump to {version}"
          }
        },
        "addAll": {
          "type": "boolean",
          "title": "Execute `git add .` not only the changelog.",
          "default": true
        }
      },
      "additionalProperties": false,
      "title": "How to commit the changelog."
    },
    "IAutoLink": {
      "type": "object",
      "properties": {
        "matches": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Pattern to match the commit title.\n\nThis is not a regular expression, but a list of prefixes.\n\nOnly allow characters `[a-zA-Z0-9-_]` and have special variables:\n- `{num}`: ticket number"
        },
        "link": {
          "type": "string",
          "description": "Replace the matched pattern with the link.\n\nAllowed variables:\n- `{num}`: ticket number"
        }
      },
      "required": [
        "matches",
        "link"
      ],
      "additionalProperties": false,
      "title": "Autolink settings."
    },
    "IPR": {
      "type": "object",
      "properties": {
        "repo": {
          "type": "string",
          "description": "Repository name.\n\nFormat: `<owner>/<repo>`",
          "default": "using `git remote get-url origin`, if not found, ignore this PR"
        },
        "head": {
          "type": "string",
          "description": "Source branch.\n\nAllowed variables:\n- `{name}`: tag name\n- `{timestamp}`: current timestamp\n\nThis will create the branch if not exists.",
          "examples": [
            "master"
          ]
        },
        "headFrom": {
          "type": "string",
          "description": "Where to create the head branch.\n\nIf this is not set, it will not create the head branch and use it directly to create the PR.\n\nAllowed variables:\n- `{name}`: tag name",
          "examples": [
            "main"
          ]
        },
        "base": {
          "type": "string",
          "description": "Target branch.\n\nAllowed variables:\n- `{name}`: tag name"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Labels to add to the PR."
        },
        "reviewers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Reviewers to add to the PR."
        },
        "title": {
          "$ref": "#/definitions/ITemplate",
          "description": "PR's title template.\n\nThis will trim the title to 100 characters and append `...` if it's too long. Will replace new line with space and trim the title before use.\n\nAllowed variables:\n- `{repo}`: repository link, see `repo.link`\n- `{version}`: version number\n- `{versionName}`: version name set in tag config\n- `{versionLast}`: last version number\n- `{ticket}`: ticket number"
        },
        "body": {
          "$ref": "#/definitions/ITemplate",
          "description": "PR's body template.\n\nAllowed variables:\n- `{repo}`: repository link, see `repo.link`\n- `{version}`: version number\n- `{versionName}`: version name set in tag config, empty if not set\n- `{versionLast}`: last version number\n- `{ticket}`: ticket number\n- `{content}`: changelog content\n- `{diffLink}`: link to the diff of this version"
        }
      },
      "additionalProperties": false,
      "title": "Pull Request global settings, custom setting can be found in `tags[].prs`."
    },
    "IDiff": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IDiffGroup"
          },
          "title": "How to group the commits."
        },
        "othersTitle": {
          "type": "string",
          "title": "Title of the group that doesn't match any group.\n\nIf `ignoreOthers` is enabled, this will not be used.",
          "default": "Others"
        },
        "item": {
          "$ref": "#/definitions/ITemplate",
          "title": "Template of single list item.\n\nAllowed variables:\n- `{repo}`: repository link, see `repo.link`\n- `{title}`: commit title after `:` add will remove all the pr number and autoLink if found\n- `{titleTail}`: commit title after `:`\n- `{titleFull}`: full commit title, which is the first line of the commit message\n- `{author}`: commit author\n- `{hash}`: commit hash, but only first 7 characters\n- `{hashLink}`: commit hash with link, like `[hash](link)`\n- `{hashFull}`: commit hash\n- `{pr}`: PR number\n- `{prLink}`: PR number with link, like `[PR](link)`\n- `{autoLink}`: value of first match auto links, usually will be ticket number\n- `{scope}`: commit scope, see `scopeNames`",
          "default": {
            "value": "- ({#\"prLink.prefixInLink\"|hashLink}{|\"autoLink\"}) {\"scope\": }{title}{ - @\"author\"}"
          }
        },
        "scopeNames": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "examples": [
            {
              "core": "Core",
              "ui": "Web UI"
            }
          ],
          "title": "Scope names.\n\nFor example, `feat(core): add something`, the scope is `core`. This will replace the scope with the name in the object."
        },
        "ignored": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Pattern to ignore the commit."
        },
        "ignoreOthers": {
          "type": "boolean",
          "title": "Ignore commits that don't match any group.",
          "default": true
        }
      },
      "additionalProperties": false,
      "title": "Auto generate release notes."
    },
    "IDiffGroup": {
      "type": "object",
      "properties": {
        "matches": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Which commits to include.\n\nRegular Expression pattern to match the commit title.\n\nRecommended to follow the [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) format."
        },
        "title": {
          "type": "string",
          "description": "Title of the group.\n\nRecommended to follow the [KeepAChangelog](https://keepachangelog.com/en/1.0.0/) format."
        },
        "priority": {
          "type": "number",
          "description": "Priority of the group.\n\nIf the commit matches multiple groups, the group with the highest priority will be used. If two groups have the same priority, the first one will be used.",
          "examples": [
            1
          ],
          "default": 0
        }
      },
      "required": [
        "matches",
        "title"
      ],
      "additionalProperties": false,
      "title": "Group commits in the changelog."
    },
    "ITag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the tag.\n\nDefault is empty value which will be considered as no name.",
          "default": ""
        },
        "pattern": {
          "type": "string",
          "description": "Regular Expression pattern to match the tag."
        },
        "withChangelog": {
          "type": "boolean",
          "description": "Should use this tag to generate changelog.",
          "default": true
        },
        "release": {
          "$ref": "#/definitions/IRelease",
          "description": "Something about GitHub Release."
        },
        "prs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ITagPR"
          },
          "description": "Something about PR's."
        },
        "sort": {
          "$ref": "#/definitions/ITagSort",
          "description": "Something about sorting the version."
        }
      },
      "additionalProperties": false,
      "title": "Tag settings.\n\nThis will be used as list and the first match of the pattern will be used."
    },
    "IRelease": {
      "type": "object",
      "properties": {
        "enable": {
          "type": "boolean",
          "description": "Enable GitHub Release.",
          "default": true
        },
        "title": {
          "$ref": "#/definitions/ITemplate",
          "description": "Title of the release.\n\nAllowed variables:\n- `{repo}`: repository link, see `repo.link`\n- `{version}`: current version number\n- `{versionName}`: version name set in tag config\n- `{versionLast}`: last version number\n- `{ticket}`: ticket number",
          "examples": [
            "Stable-{version}"
          ],
          "default": "{version}"
        },
        "body": {
          "$ref": "#/definitions/ITemplate",
          "description": "Release body.\n\nAllowed variables:\n- `{repo}`: repository link, see `repo.link`\n- `{content}`: new version changelog body.\n- `{version}`: current version number\n- `{versionName}`: version name set in tag config\n- `{versionLast}`: last version number\n- `{diffLink}`: link to the diff of this version\n- `{ticket}`: ticket number",
          "default": "{Ticket: \"ticket\"<NL><NL>}{content}"
        },
        "preRelease": {
          "type": "boolean",
          "description": "Is this a pre-release.",
          "default": false
        },
        "draft": {
          "type": "boolean",
          "description": "Is this a draft release.",
          "default": false
        }
      },
      "additionalProperties": false,
      "title": "GitHub Release settings."
    },
    "ITagPR": {
      "type": "object",
      "properties": {
        "repo": {
          "type": "string",
          "description": "Repository name.\n\nsee pr.repo"
        },
        "head": {
          "type": "string",
          "description": "Source branch.\n\nsee pr.head"
        },
        "headFrom": {
          "type": "string",
          "description": "Where to create the head branch.\n\nsee pr.headFrom"
        },
        "base": {
          "type": "string",
          "description": "Target branch.\n\nsee pr.base"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Labels to add to the PR."
        },
        "reviewers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Reviewers to add to the PR."
        },
        "title": {
          "$ref": "#/definitions/ITemplate",
          "description": "PR title template.\n\nSame as `pr.title`, but this will override the tag's `pr.title`.\n\nsee pr.title"
        },
        "replacements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IPRReplace"
          },
          "description": "What content to replace in the head branch.\n\nRemember to set `headFrom` if you want to create a new branch."
        },
        "commitMessage": {
          "$ref": "#/definitions/ITemplate",
          "description": "Commit message template.\n\nIf not set, it will use the message in `tag.prBranches[].replacements[].commitMessage`. One of them must be set.\n\nAllowed variables:\n- `{repo}`: repository link, see `repo.link`\n- `{version}`: version number\n- `{versionName}`: version name set in tag config\n- `{versionLast}`: last version number\n- `{ticket}`: ticket number",
          "default": "chore: bump to {version}"
        }
      },
      "additionalProperties": false,
      "title": "After tag is created, create PR's."
    },
    "IPRReplace": {
      "type": "object",
      "properties": {
        "commitMessage": {
          "$ref": "#/definitions/ITemplate",
          "description": "Commit message template.\n\nIf not set, it will use the message in `tag.prBranches[].commitMessage`. One of them must be set.\n\nAllowed variables:\n- `{repo}`: repository link, see `repo.link`\n- `{version}`: version number\n- `{versionName}`: version name set in tag config\n- `{versionLast}`: last version number\n- `{ticket}`: ticket number"
        },
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "File path to replace."
        },
        "pattern": {
          "type": "string",
          "description": "Regular Expression pattern to find the text and replace it by `replacement`.\n\nIf this is not set, the whole tag config will be ignored."
        },
        "replacement": {
          "$ref": "#/definitions/ITemplate",
          "description": "Replacement string.\n\nAllowed variables:\n- `{repo}`: repository link, see `repo.link`\n- `{version}`: version number\n- `{versionName}`: version name set in tag config\n- `{versionLast}`: last version number\n- `{ticket}`: ticket number"
        }
      },
      "required": [
        "paths",
        "pattern",
        "replacement"
      ],
      "additionalProperties": false,
      "title": "PR's files replacement settings."
    },
    "ITagSort": {
      "type": "object",
      "properties": {
        "separator": {
          "type": "string",
          "description": "Separator of the version.\n\nSame as the `-t` option in the `sort` command.",
          "default": "."
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Field to sort.\n\nSame as the `-k` option in the `sort` command. `KEYDEF[]`\n\nKEYDEF is F[.C][OPTS][,F[.C][OPTS]] for start and stop position, where F is a field number and C a character position in the field; both are origin 1, and the stop position defaults to the line's end.  If neither -t nor -b is in effect, characters in a field are counted from the beginning of the preceding whitespace. OPTS is one or more single-letter ordering options [bdfMn].  If no key is given, use the `n` (compare according to string numerical value) as the key. If both OPTS has given, the last one will be used.",
          "examples": [
            [
              "1,1n",
              "2,2n",
              "3,3n",
              "3,3a"
            ]
          ],
          "default": [
            "1,1n"
          ]
        }
      },
      "additionalProperties": false,
      "title": "How to sort the version, using unix sort algorithm."
    }
  }
}
